library(tidymodels)
library(embed)
library(ggplot2)
library(recipes)
library(vroom)
train_data <- vroom("C:/Users/sfolk/Desktop/STAT348/AmazonEmployeeAccess/train.csv")
test_data <- vroom("C:/Users/sfolk/Desktop/STAT348/AmazonEmployeeAccess/test.csv")
train_data$ACTION <- as.factor(train_data$ACTION)
my_recipe <- recipe(ACTION ~ ., data = train_data) |>
step_mutate_at(all_numeric_predictors(), fn = factor) |>
step_other(all_nominal_predictors(), threshold = 0.001) |>
step_dummy(all_nominal_predictors())
# apply the recipe to your data
prep <- prep(my_recipe)
my_recipe <- recipe(ACTION ~ ., data = train_data) |>
step_mutate_at(all_numeric_predictors(), fn = factor) |>
step_other(all_nominal_predictors(), threshold = 0.01) |>
step_dummy(all_nominal_predictors())
# apply the recipe to your data
prep <- prep(my_recipe)
baked <- bake(prep, new_data = train_data)
logRegModel <- logistic_reg() |>
set_engine("glm")
log_wf <- workflow() |>
add_recipe(my_recipe) |>
add_model(logRegModel) |>
fit(data = train_data)
amazon_predictions <- predict(log_wf,
new_data=test_data,
type=class)
amazon_predictions <- predict(log_wf,
new_data=test_data,
type="class")
# Create a data frame with Id and Action
predictions_df <- data.frame(Id = test_data$Id, Action = as.numeric(amazon_predictions$.pred_class))
vIEW(amazon_predictions)
view(amazon_predictions)
view(amazon_predictions)
# Create a data frame with Id and Action
predictions_df <- data.frame(Id = test_data$Id, Action = as.numeric(amazon_predictions$.pred_class))
# Write the predictions to a CSV file
write.csv(predictions_df, file = "predictions.csv", row.names = FALSE)
View(test_data)
# Create a data frame with Id and Action
predictions_df <- data.frame(Id = test_data$Id, Action = as.numeric(amazon_predictions$.pred_class))
# Create a data frame with Id and Action
predictions_df <- data.frame(Id = test_data$id, Action = as.numeric(amazon_predictions$.pred_class))
# Ensure no negative predictions if needed
predictions_df$Action <- pmax(0, predictions_df$Action)
# Optionally, if you need to convert Id to character format
predictions_df$Id <- as.character(predictions_df$id)
# Optionally, if you need to convert Id to character format
predictions_df$id <- as.character(predictions_df$id)
# Check the column names in predictions_df
print(names(predictions_df))
# Create a data frame with Id and Action
predictions_df <- data.frame(Id = test_data$Id, Action = as.numeric(amazon_predictions$.pred_class))
# Create a data frame with Id and Action
predictions_df <- data.frame(id = test_data$id, Action = as.numeric(amazon_predictions$.pred_class))
# Ensure no negative predictions if needed
predictions_df$Action <- pmax(0, predictions_df$Action)
# Check the column names in predictions_df
print(names(predictions_df))
# If the correct column is 'Id', convert it to character
predictions_df$id <- as.character(predictions_df$id)
# Write the submission file
vroom_write(x = predictions_df, file = "C:/Users/sfolk/Desktop/YourFolder/Predictions.csv", delim = ",")
# Write the submission file
vroom_write(x = predictions_df, file = "C:/Users/sfolk/Desktop/STAT348/Predictions.csv", delim = ",")
logRegModel <- logistic_reg(mixture=tune(),peantly=tune()) |>
set_engine("glm")
logRegModel <- logistic_reg(mixture=tune(),peantly=tune()) |>
set_engine("glm")
logRegModel <- logistic_reg(mixture = tune(), penalty = tune()) |>
set_engine("glm")
log_wf <- workflow() |>
add_recipe(my_recipe) |>
add_model(logRegModel) |>
fit(data = train_data)
tuning_grid <- grid_regular(penalty(),
mixture(),
levels = L)
tuning_grid <- grid_regular(penalty(),
mixture(),
levels = 2)
folds <- vfold_cv(train_data, v = 5, repeats=1)
CV_results <- lg_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics=metric_set(roc_auc, f_meas, sens, recall, spec,
precision, accuracy))
CV_results <- log_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics=metric_set(roc_auc, f_meas, sens, recall, spec,
precision, accuracy))
my_recipe <- recipe(ACTION ~ ., data = train_data) |>
step_mutate_at(all_numeric_predictors(), fn = factor) |>
step_other(all_nominal_predictors(), threshold = 0.01) |>
step_dummy(all_nominal_predictors())
my_recipe <- recipe(ACTION ~ ., data = train_data) |>
step_mutate_at(all_numeric_predictors(), fn = factor) |>
step_other(all_nominal_predictors(), threshold = 0.01) |>
step_dummy(all_nominal_predictors()) |>
step_normalize(all_normal_predictors())
# apply the recipe to your data
prep <- prep(my_recipe)
library(embed)
